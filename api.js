// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
const config =
  typeof CONFIG !== "undefined"
    ? CONFIG
    : {
        STRAPI_BASE_URL: "http://localhost:1337",
        API_TOKEN:
          "4d517983794bd6eeaf62f96682ff0003038308f3c0f22d00f5a184d0bcb69d31c41baa4c3efdc6f3321e9d5f1bac524fd0c887c257207b570f2df9e60972d9d50229a85ab541359f4b5135fd873ce73f6dace07fe0655c8b385fdbcb33218e3fb144f63cf0e1c95cbe36e5d5c4eb8ebb2d7d4aed2987d2e74d035887d58a14a8",
        API_SETTINGS: { timeout: 10000, retries: 3 },
        IMAGE_SETTINGS: {
          defaultFormat: "medium",
          fallbackText: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        },
        UI_SETTINGS: {
          loadingText: "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...",
          noProductsText: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
          errorText: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
        },
      };

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Strapi
class StrapiAPI {
  constructor() {
    this.baseURL = config.STRAPI_BASE_URL;
    this.token = config.API_TOKEN;
    this.retries = config.API_SETTINGS?.retries || 3;
    this.timeout = config.API_SETTINGS?.timeout || 10000;
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  async makeRequest(url, options = {}) {
    const requestOptions = {
      method: "GET",
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
        ...options.headers,
      },
      ...options,
    };

    for (let attempt = 1; attempt <= this.retries; attempt++) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        const response = await fetch(url, {
          ...requestOptions,
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
      } catch (error) {
        console.warn(
          `–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retries} –Ω–µ —É–¥–∞–ª–∞—Å—å:`,
          error.message,
        );

        if (attempt === this.retries) {
          throw new Error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ ${this.retries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`,
          );
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—É–≤–∏
  async fetchShoes(params = {}) {
    const searchParams = new URLSearchParams({
      populate: "*",
      ...params,
    });

    const url = `${this.baseURL}/api/shoes?${searchParams}`;
    const data = await this.makeRequest(url);
    return data.data || [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
  async fetchShoe(id) {
    const url = `${this.baseURL}/api/shoes/${id}?populate=*`;
    const data = await this.makeRequest(url);
    return data.data;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API
const strapiAPI = new StrapiAPI();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
class ImageUtils {
  static getImageUrl(photo, format = "medium") {
    if (!photo || !Array.isArray(photo) || photo.length === 0) {
      return null;
    }

    const image = photo[0];
    const imageFormat = image.formats?.[format];
    const imageUrl = imageFormat?.url || image.url;

    return imageUrl ? `${config.STRAPI_BASE_URL}${imageUrl}` : null;
  }

  static createImageElement(src, alt, className = "shoe-image") {
    if (!src) {
      return `<div class="image-fallback">üë†</div>`;
    }

    return `<img src="${src}" alt="${alt}" class="${className}" loading="lazy"
                     onerror="this.style.display='none'; this.nextElementSibling?.style.display='flex';">
                <div class="image-fallback" style="display:none;">üë†</div>`;
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
class ProductUtils {
  static getBrand(name) {
    const brands = {
      ZAZA: { name: "ZAZA", icon: "üëë" },
      –µ–≤—Ä–æ–º–æ–¥–∞: { name: "–ï–≤—Ä–æ–º–æ–¥–∞", icon: "‚ú®" },
      —Ä–æ–±–∏–Ω: { name: "–†–æ–±–∏–Ω", icon: "üåü" },
      –º–∞—Ä–∏—Å: { name: "–ú–∏—Å—Å –ú–∞—Ä–∏—Å", icon: "üíé" },
      vacs: { name: "VACS", icon: "üî•" },
    };

    const lowerName = name.toLowerCase();
    for (const [key, brand] of Object.entries(brands)) {
      if (lowerName.includes(key.toLowerCase())) {
        return brand;
      }
    }

    return { name: "Premium", icon: "‚≠ê" };
  }

  static getFeatures(name) {
    const features = [];
    const lowerName = name.toLowerCase();

    if (lowerName.includes("–±–æ—Å–æ–Ω–æ–∂–∫–∏") || lowerName.includes("—Å–∞–Ω–¥–∞–ª–∏")) {
      features.push("–õ–µ—Ç–Ω—è—è");
    }
    if (lowerName.includes("—Ç—É—Ñ–ª–∏")) {
      features.push("–ö–ª–∞—Å—Å–∏–∫–∞");
    }
    if (lowerName.includes("—Å–∞–ø–æ–≥–∏") || lowerName.includes("–±–æ—Ç–∏–Ω–∫–∏")) {
      features.push("–ó–∏–º–Ω—è—è");
    }
    if (lowerName.includes("–∫—Ä–æ—Å—Å–æ–≤–∫–∏")) {
      features.push("–°–ø–æ—Ä—Ç");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    features.push("–ö–æ–º—Ñ–æ—Ä—Ç");
    features.push("–ö–∞—á–µ—Å—Ç–≤–æ");

    return features;
  }

  static generatePrice() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const basePrice = Math.floor(Math.random() * 500000) + 200000; // 200k - 700k —Å—É–º
    const hasDiscount = Math.random() > 0.7; // 30% —à–∞–Ω—Å —Å–∫–∏–¥–∫–∏

    if (hasDiscount) {
      const discount = Math.floor(Math.random() * 30) + 10; // 10-40% —Å–∫–∏–¥–∫–∞
      const discountPrice = Math.floor((basePrice * (100 - discount)) / 100);
      return {
        current: discountPrice,
        old: basePrice,
        discount: discount,
      };
    }

    return {
      current: basePrice,
      old: null,
      discount: null,
    };
  }

  static formatPrice(price) {
    return new Intl.NumberFormat("uz-UZ", {
      style: "decimal",
      minimumFractionDigits: 0,
    }).format(price);
  }

  static isTopSale() {
    return Math.random() > 0.8; // 20% —à–∞–Ω—Å –±—ã—Ç—å —Ç–æ–ø –ø—Ä–æ–¥–∞–∂–µ–π
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
class ShoeCard {
  static create(shoe) {
    const imageUrl = ImageUtils.getImageUrl(
      shoe.photo,
      config.IMAGE_SETTINGS?.defaultFormat,
    );
    const imageElement = ImageUtils.createImageElement(imageUrl, shoe.name);
    const brand = ProductUtils.getBrand(shoe.name);
    const features = ProductUtils.getFeatures(shoe.name);
    const price = ProductUtils.generatePrice();
    const isTopSale = ProductUtils.isTopSale();
    const isNew =
      new Date(shoe.createdAt) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // –ù–æ–≤–∏–Ω–∫–∞ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥

    return `
      <article class="shoe-card" data-shoe-id="${shoe.documentId}" onclick="goToShoeDetails('${shoe.documentId}')">
        <div class="shoe-image-container">
          ${imageElement}
          ${isTopSale ? '<div class="product-badge">–¢–æ–ø –ø—Ä–æ–¥–∞–∂</div>' : ""}
          ${isNew ? '<div class="product-badge" style="left: auto; right: 60px;">–ù–æ–≤–∏–Ω–∫–∞</div>' : ""}
          <button class="favorite-btn" onclick="event.stopPropagation(); toggleFavorite(this)">‚ù§Ô∏è</button>
        </div>

        <div class="shoe-info">
          <div class="shoe-brand">${brand.icon} ${brand.name}</div>
          <h3 class="shoe-name">${this.escapeHtml(shoe.name)}</h3>
          <p class="shoe-description">–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –æ–±—É–≤—å –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–¥–æ—à–≤–∞ –∏ —Å—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω.</p>

          <div class="shoe-features">
            ${features.map((feature) => `<span class="feature-tag">${feature}</span>`).join("")}
          </div>

          <div class="shoe-price">
            <span class="price-current">${ProductUtils.formatPrice(price.current)} —Å—É–º</span>
            ${price.old ? `<span class="price-old">${ProductUtils.formatPrice(price.old)} —Å—É–º</span>` : ""}
            ${price.discount ? `<span class="price-discount">-${price.discount}%</span>` : ""}
          </div>

          <div class="shoe-actions">
            <button class="btn-details" onclick="event.stopPropagation(); goToShoeDetails('${shoe.documentId}')">
              üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
            </button>
            <button class="btn-cart" onclick="event.stopPropagation(); addToCart('${shoe.documentId}')">
              üõí –í –∫–æ—Ä–∑–∏–Ω—É
            </button>
          </div>
        </div>
      </article>
    `;
  }

  static escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  static formatDate(dateString) {
    try {
      return new Date(dateString).toLocaleDateString("ru-RU");
    } catch {
      return "–ù–µ–¥–∞–≤–Ω–æ";
    }
  }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤
class ShoesManager {
  constructor(containerId) {
    this.container = document.getElementById(containerId);
    this.shoes = [];
    this.isLoading = false;
    this.favorites = JSON.parse(
      localStorage.getItem("talaria_favorites") || "[]",
    );
    this.cart = JSON.parse(localStorage.getItem("talaria_cart") || "[]");
  }

  showLoading() {
    if (!this.container) return;
    this.container.innerHTML = `<div class="loading">${config.UI_SETTINGS?.loadingText}</div>`;
  }

  showError(message) {
    if (!this.container) return;
    this.container.innerHTML = `
      <div class="error">
        <p>${message}</p>
        <button class="retry-btn" onclick="shoesManager.loadShoes()">
          üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    `;
  }

  showNoProducts() {
    if (!this.container) return;
    this.container.innerHTML = `<div class="no-products">
      <p>${config.UI_SETTINGS?.noProductsText}</p>
      <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏!</p>
    </div>`;
  }

  async loadShoes(params = {}) {
    if (this.isLoading) return;

    try {
      this.isLoading = true;
      this.showLoading();

      this.shoes = await strapiAPI.fetchShoes(params);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ø –ø—Ä–æ–¥–∞–∂–∏, –ø–æ—Ç–æ–º –Ω–æ–≤–∏–Ω–∫–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      this.shoes.sort((a, b) => {
        const aIsNew =
          new Date(a.createdAt) >
          new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        const bIsNew =
          new Date(b.createdAt) >
          new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

        if (aIsNew && !bIsNew) return -1;
        if (!aIsNew && bIsNew) return 1;
        return 0;
      });

      this.renderShoes();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:", error);
      this.showError(error.message || config.UI_SETTINGS?.errorText);
    } finally {
      this.isLoading = false;
    }
  }

  renderShoes() {
    if (!this.container) return;

    if (this.shoes.length === 0) {
      this.showNoProducts();
      return;
    }

    const shoesHTML = this.shoes.map((shoe) => ShoeCard.create(shoe)).join("");
    this.container.innerHTML = shoesHTML;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.animateCards();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    this.updateFavoriteButtons();
  }

  animateCards() {
    const cards = this.container.querySelectorAll(".shoe-card");
    cards.forEach((card, index) => {
      card.style.opacity = "0";
      card.style.transform = "translateY(30px)";

      setTimeout(() => {
        card.style.transition =
          "opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1), transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)";
        card.style.opacity = "1";
        card.style.transform = "translateY(0)";
      }, index * 150);
    });
  }

  updateFavoriteButtons() {
    const favoriteButtons = this.container.querySelectorAll(".favorite-btn");
    favoriteButtons.forEach((button) => {
      const card = button.closest(".shoe-card");
      const shoeId = card.dataset.shoeId;
      if (this.favorites.includes(shoeId)) {
        button.innerHTML = "üíñ";
        button.classList.add("active");
      }
    });
  }

  // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
  searchShoes(query) {
    const filteredShoes = this.shoes.filter((shoe) =>
      shoe.name.toLowerCase().includes(query.toLowerCase()),
    );

    if (filteredShoes.length === 0) {
      this.showNoProducts();
      return;
    }

    const shoesHTML = filteredShoes
      .map((shoe) => ShoeCard.create(shoe))
      .join("");
    this.container.innerHTML = shoesHTML;
    this.animateCards();
    this.updateFavoriteButtons();
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
  toggleFavorite(shoeId) {
    const index = this.favorites.indexOf(shoeId);
    if (index > -1) {
      this.favorites.splice(index, 1);
    } else {
      this.favorites.push(shoeId);
    }
    localStorage.setItem("talaria_favorites", JSON.stringify(this.favorites));
    this.updateFavoriteButtons();
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π
  addToCart(shoeId) {
    if (!this.cart.includes(shoeId)) {
      this.cart.push(shoeId);
      localStorage.setItem("talaria_cart", JSON.stringify(this.cart));
      this.showNotification("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí");
    } else {
      this.showNotification("–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ! ‚úÖ");
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification(message) {
    const notification = document.createElement("div");
    notification.className = "notification";
    notification.innerHTML = `
      <div class="notification-content">
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()">√ó</button>
      </div>
    `;
    notification.style.cssText = `
      position: fixed;
      top: 100px;
      right: 20px;
      background: var(--gradient-gold);
      color: white;
      padding: 15px 20px;
      border-radius: 10px;
      box-shadow: var(--shadow-heavy);
      z-index: 10000;
      animation: slideIn 0.3s ease;
    `;

    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      if (notification.parentElement) {
        notification.style.animation = "slideOut 0.3s ease";
        setTimeout(() => notification.remove(), 300);
      }
    }, 3000);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
let shoesManager;

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
function goToShoeDetails(shoeId) {
  // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
  const currentUrl = new URL(window.location);
  const detailsUrl = new URL(
    "product.html",
    currentUrl.origin + currentUrl.pathname.replace("index.html", ""),
  );
  detailsUrl.searchParams.set("id", shoeId);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ sessionStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const shoe = shoesManager.shoes.find((s) => s.documentId === shoeId);
  if (shoe) {
    sessionStorage.setItem("current_shoe", JSON.stringify(shoe));
  }

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
  window.location.href = detailsUrl.toString();
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
function toggleFavorite(button) {
  const card = button.closest(".shoe-card");
  const shoeId = card.dataset.shoeId;

  if (button.innerHTML === "‚ù§Ô∏è") {
    button.innerHTML = "üíñ";
    button.classList.add("active");
    shoesManager.favorites.push(shoeId);
  } else {
    button.innerHTML = "‚ù§Ô∏è";
    button.classList.remove("active");
    const index = shoesManager.favorites.indexOf(shoeId);
    if (index > -1) shoesManager.favorites.splice(index, 1);
  }

  localStorage.setItem(
    "talaria_favorites",
    JSON.stringify(shoesManager.favorites),
  );

  // –ê–Ω–∏–º–∞—Ü–∏—è
  button.style.transform = "scale(1.3)";
  setTimeout(() => (button.style.transform = "scale(1)"), 200);
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(shoeId) {
  shoesManager.addToCart(shoeId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
async function showShoeDetails(shoeId) {
  try {
    const shoe = await strapiAPI.fetchShoe(shoeId);
    const brand = ProductUtils.getBrand(shoe.name);
    const price = ProductUtils.generatePrice();

    const modal = document.createElement("div");
    modal.className = "modal-overlay";
    modal.innerHTML = `
      <div class="modal-content">
        <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">√ó</button>
        <h2>${brand.icon} ${shoe.name}</h2>
        <p><strong>–ë—Ä–µ–Ω–¥:</strong> ${brand.name}</p>
        <p><strong>–¶–µ–Ω–∞:</strong> ${ProductUtils.formatPrice(price.current)} —Å—É–º</p>
        <p><strong>–î–æ–±–∞–≤–ª–µ–Ω–æ:</strong> ${ShoeCard.formatDate(shoe.createdAt)}</p>
        <div style="margin-top: 20px;">
          <button class="btn-details" onclick="goToShoeDetails('${shoeId}')">
            –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
          </button>
        </div>
      </div>
    `;

    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    `;

    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  } catch (error) {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞");
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationStyles = document.createElement("style");
notificationStyles.textContent = `
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  .notification-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
  }

  .notification-content button {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-overlay .modal-content {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    max-width: 500px;
    margin: 20px;
    position: relative;
  }

  .modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #999;
  }

  .favorite-btn.active {
    background: var(--accent-color);
    color: white;
  }
`;
document.head.appendChild(notificationStyles);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", function () {
  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Talaria API...");

  shoesManager = new ShoesManager("shoes-container");

  if (shoesManager.container) {
    shoesManager.loadShoes();
    console.log("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    console.log(`‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${shoesManager.favorites.length}`);
    console.log(`üõí –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${shoesManager.cart.length}`);
  } else {
    console.warn("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ —à–∞–ø–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const favoriteBtn = document.querySelector(".action-btn:first-child");
  const cartBtn = document.querySelector(".action-btn.primary");

  if (favoriteBtn && shoesManager.favorites.length > 0) {
    favoriteBtn.innerHTML = `‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ (${shoesManager.favorites.length})`;
  }

  if (cartBtn && shoesManager.cart.length > 0) {
    cartBtn.innerHTML = `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${shoesManager.cart.length})`;
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== "undefined" && module.exports) {
  module.exports = {
    StrapiAPI,
    ShoesManager,
    ShoeCard,
    ImageUtils,
    ProductUtils,
  };
}
